{
  "id": "gallery_default",
  "name": "Basic Agent Gallery",
  "metadata": {
    "author": "Hyo Choi",
    "created_at": "2024-12-12T00:00:00Z",
    "updated_at": "2024-12-12T00:00:00Z",
    "version": "1.0.0",
    "description": "A default gallery containing basic components and human-in-loop conversations",
    "tags": [
      "basic",
      "assistant"
    ],
    "license": "MIT",
    "category": "conversation"
  },
  "items": {
    "teams": [
      
    ],
    "components": {
      "agents": [
        {
          "component_type": "agent",
          "description": "An assistant agent that can help users complete tasks",
          "name": "single_tool_use_agent",
          "agent_type": "AssistantAgent",
          "system_message": "You are a tool-use agent. Your only tools are calculator, fetch_website, and weather_forecast. Use them to find information. You may make only one tool call at a time. Once you have the results, do not perform any calculations or modifications based on them. If the userâ€™s query is not applicable to your tools, respond with a gentle comment with 'TERMINATE' and do not provide an answer. After done your task, reply with 'TERMINATE'.",
          "model_client": {
            "model": "gpt-4o",
            "model_type": "AzureOpenAIChatCompletionClient",
            "azure_deployment": "gpt-4o",
            "api_version": "2025-01-01-preview",
            "azure_endpoint": "https://aoai-services1.openai.azure.com/",
            "api_key": "32572ab337444af999eb7242997d56c9",
            "component_type": "model"
          },
          "tools": [
            {
              "component_type": "tool",
              "name": "calculator",
              "description": "A calculator that performs basic arithmetic operations between two float numbers",
              "content": "def calculator(a: float, b: float, operator: str) -> str:\n    try:\n        if operator == '+':\n            return str(a + b)\n        elif operator == '-':\n            return str(a - b)\n        elif operator == '*':\n            return str(a * b)\n        elif operator == '/':\n            if b == 0:\n                return 'Error: Division by zero'\n            return str(a / b)\n        else:\n            return 'Error: Invalid operator. Please use +, -, *, or /'\n    except Exception as e:\n        return f'Error: {str(e)}'",
              "tool_type": "PythonFunction"
            },
            {
              "component_type": "tool",
              "name": "fetch_website",
              "description": "Fetch and return the content of a website URL",
              "content": "def fetch_website(url: str) -> str:\n    try:\n        import requests\n        from urllib.parse import urlparse\n        \n        # Validate URL format\n        parsed = urlparse(url)\n        if not parsed.scheme or not parsed.netloc:\n            return \"Error: Invalid URL format. Please include http:// or https://\"\n            \n        # Add scheme if not present\n        if not url.startswith(('http://', 'https://')): \n            url = 'https://' + url\n            \n        # Set headers to mimic a browser request\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n        \n        # Make the request with a timeout\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        \n        # Return the text content\n        return response.text\n        \n    except requests.exceptions.Timeout:\n        return \"Error: Request timed out\"\n    except requests.exceptions.ConnectionError:\n        return \"Error: Failed to connect to the website\"\n    except requests.exceptions.HTTPError as e:\n        return f\"Error: HTTP {e.response.status_code} - {e.response.reason}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
              "tool_type": "PythonFunction"
            },
            {
              "component_type": "tool",
              "name": "weather_forecast",
              "description": "Get the weather forecast for a specific location",
              "content": "def get_weather(location: str) -> str:\n return f'The weather in {location} is 23 degrees celsius and Sunny.'",
              "tool_type": "PythonFunction"
            }
          ]
        },
        {
          "component_type": "agent",
          "description": "A user agent that is driven by a human user",
          "name": "user_agent",
          "agent_type": "UserProxyAgent",
          "tools": []
        },
        {
          "component_type": "agent",
          "description": "You are a writer agent. Generate content based on user requests.",
          "system_message": "You are a writer agent responsible for generating content based on user requests. Incorporate feedback from reviewer agents to iteratively improve the content until it meets the highest quality standards.",
          "name": "writer_agent",
          "agent_type": "AssistantAgent",
          "tools": []
        },
        {
          "component_type": "agent",
          "description": "You are a reviewer agent. Evaluate the content provided by the writer agent and offer constructive feedback for improvement.",
          "system_message": "You are a reviewer agent. Evaluate the content provided by the writer agent, offering constructive feedback for improvement. Score the content from 1 to 5 based on its quality and alignment with the user request. If the score is 5, respond with 'TERMINATE'. Do not use bold style.",
          "name": "reviewer_agent",
          "agent_type": "AssistantAgent",
          "tools": []
        }
      ],
      "models": [
        {
          "model": "gpt-4o",
          "model_type": "AzureOpenAIChatCompletionClient",
          "azure_deployment": "gpt-4o",
          "api_version": "2025-01-01-preview",
          "azure_endpoint": "https://aoai-services1.openai.azure.com/",
          "api_key": "32572ab337444af999eb7242997d56c9",
          "component_type": "model"
        }
      ],
      "tools": [
        {
          "component_type": "tool",
          "name": "calculator",
          "description": "A simple calculator that performs basic arithmetic operations between two numbers",
          "content": "def calculator(a: float, b: float, operator: str) -> str:\n    try:\n        if operator == '+':\n            return str(a + b)\n        elif operator == '-':\n            return str(a - b)\n        elif operator == '*':\n            return str(a * b)\n        elif operator == '/':\n            if b == 0:\n                return 'Error: Division by zero'\n            return str(a / b)\n        else:\n            return 'Error: Invalid operator. Please use +, -, *, or /'\n    except Exception as e:\n        return f'Error: {str(e)}'",
          "tool_type": "PythonFunction"
        },
        {
          "component_type": "tool",
          "name": "fetch_website",
          "description": "Fetch and return the content of a website URL",
          "content": "async def fetch_website(url: str) -> str:\n    try:\n        import requests\n        from urllib.parse import urlparse\n        \n        # Validate URL format\n        parsed = urlparse(url)\n        if not parsed.scheme or not parsed.netloc:\n            return \"Error: Invalid URL format. Please include http:// or https://\"\n            \n        # Add scheme if not present\n        if not url.startswith(('http://', 'https://')): \n            url = 'https://' + url\n            \n        # Set headers to mimic a browser request\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n        \n        # Make the request with a timeout\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        \n        # Return the text content\n        return response.text\n        \n    except requests.exceptions.Timeout:\n        return \"Error: Request timed out\"\n    except requests.exceptions.ConnectionError:\n        return \"Error: Failed to connect to the website\"\n    except requests.exceptions.HTTPError as e:\n        return f\"Error: HTTP {e.response.status_code} - {e.response.reason}\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
          "tool_type": "PythonFunction"
        },
        {
          "component_type": "tool",
          "name": "weather_forecast",
          "description": "Get the weather forecast for a specific location.",
          "content": "def get_weather(location: str) -> str:\n return f'The weather in {location} is 23 degrees celsius and Sunny.'",
          "tool_type": "PythonFunction"
        }
      ],
      "terminations": [
        {
          "component_type": "termination",
          "description": "Terminate the conversation when the user mentions 'TERMINATE'",
          "termination_type": "TextMentionTermination",
          "text": "TERMINATE"
        },
        {
          "component_type": "termination",
          "description": "Terminate the conversation after 10 messages",
          "termination_type": "MaxMessageTermination",
          "max_messages": 10
        },
        {
          "component_type": "termination",
          "description": "Terminate the conversation when the user mentions 'TERMINATE' or after 10 messages",
          "termination_type": "CombinationTermination",
          "operator": "or",
          "conditions": [
            {
              "component_type": "termination",
              "description": "Terminate the conversation when the user mentions 'TERMINATE'",
              "termination_type": "TextMentionTermination",
              "text": "TERMINATE"
            },
            {
              "component_type": "termination",
              "description": "Terminate the conversation after 10 messages",
              "termination_type": "MaxMessageTermination",
              "max_messages": 10
            }
          ]
        }
      ]
    }
  }
}